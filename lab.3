import sys, os
import numpy as np
import difflib
from PyQt6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
    QPushButton, QLabel, QFileDialog, QMessageBox, QTabWidget,
    QPlainTextEdit, QLineEdit, QGroupBox
)
from PyQt6.QtGui import QPixmap, QImage, QColor
from PyQt6.QtCore import Qt

END_MARKER = b"\xfe\x00\xff\xfa"

def text_to_bits_with_marker(text: str) -> list[int]:
    data = text.encode('utf-8', errors='replace')
    data_marker = data + END_MARKER
    bits = []
    for byte in data_marker:
        for i in range(8):
            bit = (byte >> (7 - i)) & 1
            bits.append(bit)
    return bits

def bits_to_text_with_marker(bits: list[int]) -> str:
    r = len(bits) % 8
    if r != 0:
        bits += [0] * (8 - r)
    raw_bytes = bytearray()
    for i in range(0, len(bits), 8):
        val = 0
        for b in bits[i:i+8]:
            val = (val << 1) | b
        raw_bytes.append(val)
    idx_marker = raw_bytes.find(END_MARKER)
    if idx_marker < 0:
        payload = raw_bytes
    else:
        payload = raw_bytes[:idx_marker]
    try:
        text = payload.decode('utf-8', errors='replace')
    except Exception:
        text = ""
    return text

def f(yi, yi_plus):
    return ((yi // 2) + yi_plus) & 1

def embed_lsb_matching_revisited(cover: QImage, bits: list[int]):
    """
    Встраивание согласно статье "LSB Matching Revisited".
    Обрабатываем изображение в 8-битном формате (градации серого).
    Пиксели обрабатываются парами в порядке row-major.
    Для каждой пары:
      - Первый бит сообщения m1 сравнивается с LSB первого пикселя.
      - Если LSB != m1, корректируется первый пиксель (±1) так, чтобы после корректировки
        функция f(y1, x2) равнялась второму биту m2.
      - Если LSB == m1, первый пиксель остаётся неизменным, а при необходимости корректируется второй пиксель.
    """
    if cover.isNull():
        return QImage(), []

    cover_gray = cover.convertToFormat(QImage.Format.Format_Grayscale8)
    width, height = cover_gray.width(), cover_gray.height()
    total_pixels = width * height
    if total_pixels % 2 == 1:
        total_pixels -= 1
    total_pairs = total_pixels // 2
    if len(bits) > total_pairs * 2:
        return QImage(), []
    result = QImage(cover_gray)
    bit_index = 0
    for i in range(total_pairs):
        idx1 = 2 * i
        idx2 = 2 * i + 1

        y1 = idx1 // width
        x1 = idx1 % width
        y2 = idx2 // width
        x2 = idx2 % width

        pixel1 = result.pixelColor(x1, y1).red()
        pixel2 = result.pixelColor(x2, y2).red()

        m1 = bits[bit_index] if bit_index < len(bits) else 0
        bit_index += 1
        m2 = bits[bit_index] if bit_index < len(bits) else 0
        bit_index += 1

        if (pixel1 & 1) != m1:
            new_pixel2 = pixel2
            candidate_minus = pixel1 - 1 if pixel1 > 0 else None
            candidate_plus  = pixel1 + 1 if pixel1 < 255 else None

            if candidate_minus is not None and f(candidate_minus, new_pixel2) == m2:
                new_pixel1 = candidate_minus
            elif candidate_plus is not None and f(candidate_plus, new_pixel2) == m2:
                new_pixel1 = candidate_plus
            else:
                if candidate_plus is not None:
                    new_pixel1 = candidate_plus
                elif candidate_minus is not None:
                    new_pixel1 = candidate_minus
                else:
                    new_pixel1 = pixel1
        else:
            new_pixel1 = pixel1
            if f(new_pixel1, pixel2) == m2:
                new_pixel2 = pixel2
            else:
                candidate_plus = pixel2 + 1 if pixel2 < 255 else None
                candidate_minus = pixel2 - 1 if pixel2 > 0 else None

                def prefer_plus(val):
                    return (val % 2 == 0)

                if prefer_plus(pixel2):
                    if candidate_plus is not None and f(new_pixel1, candidate_plus) == m2:
                        new_pixel2 = candidate_plus
                    elif candidate_minus is not None and f(new_pixel1, candidate_minus) == m2:
                        new_pixel2 = candidate_minus
                    else:
                        new_pixel2 = candidate_plus if candidate_plus is not None else (candidate_minus if candidate_minus is not None else pixel2)
                else:
                    if candidate_minus is not None and f(new_pixel1, candidate_minus) == m2:
                        new_pixel2 = candidate_minus
                    elif candidate_plus is not None and f(new_pixel1, candidate_plus) == m2:
                        new_pixel2 = candidate_plus
                    else:
                        new_pixel2 = candidate_minus if candidate_minus is not None else (candidate_plus if candidate_plus is not None else pixel2)
        result.setPixelColor(x1, y1, QColor(new_pixel1, new_pixel1, new_pixel1))
        result.setPixelColor(x2, y2, QColor(new_pixel2, new_pixel2, new_pixel2))

    used_indices = list(range(total_pixels))
    return result, used_indices

def extract_lsb_matching_revisited(stego: QImage):
    """
    Извлечение сообщения согласно алгоритму:
      - m_i = LSB(y_i)
      - m_{i+1} = f(y_i, y_{i+1})
    """
    if stego.isNull():
        return []
    stego_gray = stego.convertToFormat(QImage.Format.Format_Grayscale8)
    width, height = stego_gray.width(), stego_gray.height()
    total_pixels = width * height
    if total_pixels % 2 == 1:
        total_pixels -= 1
    total_pairs = total_pixels // 2

    extracted_bits = []
    for i in range(total_pairs):
        idx1 = 2 * i
        idx2 = 2 * i + 1
        y1 = idx1 // width
        x1 = idx1 % width
        y2 = idx2 // width
        x2 = idx2 % width
        pixel1 = stego_gray.pixelColor(x1, y1).red()
        pixel2 = stego_gray.pixelColor(x2, y2).red()
        bit1 = pixel1 & 1
        bit2 = f(pixel1, pixel2)
        extracted_bits.append(bit1)
        extracted_bits.append(bit2)
    return extracted_bits

class LSBMR(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("LSB Matching Revisited")
        self.resize(1200, 600)
        self.original_image = QImage()
        self.processed_image = QImage()
        self.used_indices = []
        self.last_embedded_text = ""
        self.last_saved_filepath = ""
        self.init_ui()

    def init_ui(self):
        self.tabs = QTabWidget()
        self.setCentralWidget(self.tabs)
        self.init_embed_tab()
        self.init_extract_tab()

    def init_embed_tab(self):
        self.tab_embed = QWidget()
        self.tabs.addTab(self.tab_embed, "Встраивание")
        main_layout = QHBoxLayout(self.tab_embed)

        control_panel = QWidget()
        control_layout = QVBoxLayout(control_panel)
        control_layout.setAlignment(Qt.AlignmentFlag.AlignTop)

        self.btn_select_cover = QPushButton("Загрузить оригинал")
        self.btn_select_cover.clicked.connect(self.select_cover_image)
        control_layout.addWidget(self.btn_select_cover)

        self.lbl_original_path = QLabel("Файл не выбран")
        control_layout.addWidget(self.lbl_original_path)

        self.txt_input = QPlainTextEdit()
        self.txt_input.setPlaceholderText("Введите сообщение")
        control_layout.addWidget(self.txt_input)

        self.btn_embed = QPushButton("Встроить (LSBMR)")
        self.btn_embed.clicked.connect(self.embed_message)
        control_layout.addWidget(self.btn_embed)

        self.btn_save = QPushButton("Сохранить результат")
        self.btn_save.clicked.connect(self.save_watermarked_image)
        control_layout.addWidget(self.btn_save)

        self.lbl_diff_all = QLabel("Изменение по всем пикселям: -")
        control_layout.addWidget(self.lbl_diff_all)

        control_layout.addStretch(1)
        main_layout.addWidget(control_panel, 0)

        image_panel = QWidget()
        image_layout = QHBoxLayout(image_panel)

        group_original = QGroupBox("Исходное")
        layout_original = QVBoxLayout(group_original)
        self.lbl_original_display = QLabel("Нет картинки")
        self.lbl_original_display.setFixedSize(400, 400)
        self.lbl_original_display.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout_original.addWidget(self.lbl_original_display)
        image_layout.addWidget(group_original)

        group_processed = QGroupBox("Встроенное")
        layout_processed = QVBoxLayout(group_processed)
        self.lbl_processed_display = QLabel("Нет картинки")
        self.lbl_processed_display.setFixedSize(400, 400)
        self.lbl_processed_display.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout_processed.addWidget(self.lbl_processed_display)
        image_layout.addWidget(group_processed)

        main_layout.addWidget(image_panel, 1)

    def init_extract_tab(self):
        self.tab_extract = QWidget()
        self.tabs.addTab(self.tab_extract, "Извлечение")
        main_layout = QHBoxLayout(self.tab_extract)

        control_panel = QWidget()
        control_layout = QVBoxLayout(control_panel)
        control_layout.setAlignment(Qt.AlignmentFlag.AlignTop)

        self.btn_select_embedded = QPushButton("Загрузить стегоконтейнер")
        self.btn_select_embedded.clicked.connect(self.select_embedded_image)
        control_layout.addWidget(self.btn_select_embedded)

        self.lbl_embedded_path = QLabel("Файл не выбран")
        control_layout.addWidget(self.lbl_embedded_path)

        self.btn_extract = QPushButton("Извлечь")
        self.btn_extract.clicked.connect(self.extract_message)
        control_layout.addWidget(self.btn_extract)

        self.txt_extracted = QPlainTextEdit()
        self.txt_extracted.setReadOnly(True)
        self.txt_extracted.setPlaceholderText("Извлечённый текст...")
        control_layout.addWidget(self.txt_extracted)

        self.btn_measure_error = QPushButton("Измерить ошибку (%)")
        self.btn_measure_error.clicked.connect(self.measure_extraction_error)
        control_layout.addWidget(self.btn_measure_error)

        control_layout.addStretch(1)
        main_layout.addWidget(control_panel, 0)

        image_panel = QWidget()
        image_layout = QHBoxLayout(image_panel)
        group_embedded = QGroupBox("Изображение")
        layout_embedded = QVBoxLayout(group_embedded)
        self.lbl_embedded_display = QLabel("Нет картинки")
        self.lbl_embedded_display.setFixedSize(400, 400)
        self.lbl_embedded_display.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout_embedded.addWidget(self.lbl_embedded_display)
        image_layout.addWidget(group_embedded)
        main_layout.addWidget(image_panel, 1)

    def select_cover_image(self):
        file_path, _ = QFileDialog.getOpenFileName(
            self,
            "Выберите исходное изображение",
            "",
            "Изображения (*.png *.jpg *.jpeg *.bmp *.pgm);;Все файлы (*)"
        )
        if file_path:
            image = QImage(file_path)
            if image.isNull():
                QMessageBox.warning(self, "Ошибка", "Не удалось открыть!")
                return
            self.original_image = image
            self.lbl_original_path.setText(file_path)
            pixmap = QPixmap.fromImage(image).scaled(
                self.lbl_original_display.size(),
                Qt.AspectRatioMode.KeepAspectRatio,
                Qt.TransformationMode.SmoothTransformation
            )
            self.lbl_original_display.setPixmap(pixmap)

    def embed_message(self):
        if self.original_image.isNull():
            QMessageBox.warning(self, "Ошибка", "Нет исходного изображения!")
            return
        message_text = self.txt_input.toPlainText()
        if not message_text:
            QMessageBox.warning(self, "Ошибка", "Введите текст!")
            return

        bits = text_to_bits_with_marker(message_text)
        result_image, used_idx = embed_lsb_matching_revisited(self.original_image, bits)
        if result_image.isNull():
            QMessageBox.warning(self, "Ошибка", "Недостаточно пикселей для встраивания!")
            return

        self.processed_image = result_image
        self.used_indices = used_idx
        self.last_embedded_text = message_text

        pix_original = QPixmap.fromImage(self.original_image).scaled(
            self.lbl_original_display.size(),
            Qt.AspectRatioMode.KeepAspectRatio,
            Qt.TransformationMode.SmoothTransformation
        )
        self.lbl_original_display.setPixmap(pix_original)

        pix_processed = QPixmap.fromImage(result_image).scaled(
            self.lbl_processed_display.size(),
            Qt.AspectRatioMode.KeepAspectRatio,
            Qt.TransformationMode.SmoothTransformation
        )
        self.lbl_processed_display.setPixmap(pix_processed)

        # Расчёт среднего изменения по всем пикселям (для оценки искажений)
        cover_gray = self.original_image.convertToFormat(QImage.Format.Format_Grayscale8)
        stego_gray = self.processed_image.convertToFormat(QImage.Format.Format_Grayscale8)
        width, height = cover_gray.width(), cover_gray.height()
        diff_sum = 0
        count = width * height
        for y in range(height):
            for x in range(width):
                diff_sum += abs(cover_gray.pixelColor(x, y).red() - stego_gray.pixelColor(x, y).red())
        avg_diff = diff_sum / count if count else 0
        perc_all = (avg_diff / 255) * 100
        self.lbl_diff_all.setText(f"Изменение по всем пикселям: {perc_all:.4f}%")

        QMessageBox.information(self, "OK", "Сообщение встроено (LSBMR).")

    def save_watermarked_image(self):
        if self.processed_image.isNull():
            QMessageBox.warning(self, "Ошибка", "Нет результата!")
            return
        folder = QFileDialog.getExistingDirectory(self, "Выберите папку")
        if not folder:
            return 
        base_name = os.path.splitext(os.path.basename(self.lbl_original_path.text()))[0]
        filename = f"{base_name}_LSBMR_exact.bmp"
        save_path = os.path.join(folder, filename).replace("\\", "/")
        if self.processed_image.save(save_path, "BMP"):
            self.last_saved_filepath = save_path
            QMessageBox.information(self, "OK", f"Файл сохранен: {save_path}")
        else:
            QMessageBox.warning(self, "Ошибка", "Не удалось сохранить файл!")

    def select_embedded_image(self):
        file_path, _ = QFileDialog.getOpenFileName(
            self,
            "Загрузить стегоконтейнер",
            "",
            "Изображения (*.png *.jpg *.jpeg *.bmp *.pgm);;Все файлы (*)"
        )
        if file_path:
            image = QImage(file_path)
            if image.isNull():
                QMessageBox.warning(self, "Ошибка", "Не удалось загрузить!")
                return
            self.processed_image = image
            self.lbl_embedded_path.setText(file_path)
            pixmap = QPixmap.fromImage(image).scaled(
                self.lbl_embedded_display.size(),
                Qt.AspectRatioMode.KeepAspectRatio,
                Qt.TransformationMode.SmoothTransformation
            )
            self.lbl_embedded_display.setPixmap(pixmap)

    def extract_message(self):
        if self.processed_image.isNull():
            QMessageBox.warning(self, "Ошибка", "Нет изображения для извлечения!")
            return
        raw_bits = extract_lsb_matching_revisited(self.processed_image)
        extracted_text = bits_to_text_with_marker(raw_bits)
        self.txt_extracted.setPlainText(extracted_text)
        QMessageBox.information(self, "OK", "Сообщение извлечено.")

    def measure_extraction_error(self):
        if not self.last_saved_filepath:
            QMessageBox.warning(self, "Ошибка", "Файл с встраиванием не был сохранён!")
            return
        loaded_filename = os.path.basename(self.lbl_embedded_path.text())
        last_saved_filename = os.path.basename(self.last_saved_filepath)
        if loaded_filename != last_saved_filename:
            QMessageBox.warning(self, "Ошибка", "Загруженный файл не совпадает с последним сохранённым!")
            return
        original_text = self.last_embedded_text
        extracted_text = self.txt_extracted.toPlainText()
        if not original_text or not extracted_text:
            QMessageBox.warning(self, "Ошибка", "Отсутствует оригинальный или извлечённый текст!")
            return
        sequence_matcher = difflib.SequenceMatcher(None, original_text, extracted_text)
        ratio = sequence_matcher.ratio()
        error_percent = (1 - ratio) * 100
        QMessageBox.information(self, "Результат", f"Ошибка в извлечении: {error_percent:.2f}%")

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = LSBMR()
    window.show()
    sys.exit(app.exec())
